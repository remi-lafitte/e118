tt_mu_txt(z, beta = F)
tt_mu_txt(z, beta = c(F))
tt_mu_txt(z, beta = False)
tt_mu_txt(z, beta == F)
tt_mu_txt(z, beta = F)
tt_mu_txt(z, beta = T)
#'a<-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
#' Poids des souris après traitement
#'b<-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
#' x<-t.test(a , mu=  0)
#' y<-t.test(a,b)
#' z<-t.test(a,b, paired = T)
#' tt_mu_txt(x)
#' tt_mu_txt(y)
#' tt_mu_txt(z)
#' tt_mu_txt(z, beta = T)
tt_txt <- function(model, beta = c(T, F)){
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
ttest<-model
# one sample t test
q<-round(ttest$statistic,2)# statistic q
dof<-round(ttest$parameter,2)# global degree of freedom
pv<-p_txt(ttest$p.value)# raw p value. Beyond 10^-6, the round will give 0.
b <- round(ttest$estimate[1] - ifelse(is.na(ttest$estimate[2]),0,ttest$estimate[2]),2)
# estimation of the beta slope.
full<- paste(
ifelse(beta == T,
paste("$M = ",b, sep = ""), ""),
"$, 95\\% CI $[",round(ttest$conf.int[1],2),"$, $",
round(ttest$conf.int[2],2),"]$, $t(",dof,") = ",q,"$, $",pv,"$",
sep ="")
small<- paste("$t(",dof,") = ",q,"$, $",pv,"$",
sep ="")
return(list(full=full, small=small))
}
tt_txt(x)
tt_txt(x, beta = F)
tt_txt(x, beta = T)
tt_txt(x)
#'a<-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
#' Poids des souris après traitement
#'b<-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
#' x<-t.test(a , mu=  0)
#' y<-t.test(a,b)
#' z<-t.test(a,b, paired = T)
#' tt_txt(x)
#' tt_txt(y)
#' tt_txt(z)
#' tt_txt(z, beta = T)
tt_txt <- function(model, beta = c(T, F)){
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
ttest<-model
# one sample t test
q<-round(ttest$statistic,2)# statistic q
dof<-round(ttest$parameter,2)# global degree of freedom
pv<-p_txt(ttest$p.value)# raw p value. Beyond 10^-6, the round will give 0.
b <- round(ttest$estimate[1] - ifelse(is.na(ttest$estimate[2]),0,ttest$estimate[2]),2)
# estimation of the beta slope.
full<- paste(
ifelse(is.true(beta),
paste("$M = ",b, "$, ", sep = ""), ""),
"95\\% CI $[",round(ttest$conf.int[1],2),"$, $",
round(ttest$conf.int[2],2),"]$, $t(",dof,") = ",q,"$, $",pv,"$",
sep ="")
small<- paste("$t(",dof,") = ",q,"$, $",pv,"$",
sep ="")
return(list(full=full, small=small))
}
tt_txt(x)
#'a<-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
#' Poids des souris après traitement
#'b<-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
#' x<-t.test(a , mu=  0)
#' y<-t.test(a,b)
#' z<-t.test(a,b, paired = T)
#' tt_txt(x)
#' tt_txt(y)
#' tt_txt(z)
#' tt_txt(z, beta = T)
tt_txt <- function(model, beta = c(T, F)){
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
ttest<-model
# one sample t test
q<-round(ttest$statistic,2)# statistic q
dof<-round(ttest$parameter,2)# global degree of freedom
pv<-p_txt(ttest$p.value)# raw p value. Beyond 10^-6, the round will give 0.
b <- round(ttest$estimate[1] - ifelse(is.na(ttest$estimate[2]),0,ttest$estimate[2]),2)
# estimation of the beta slope.
full<- paste(
ifelse(isTRUE(beta),
paste("$M = ",b, "$, ", sep = ""), ""),
"95\\% CI $[",round(ttest$conf.int[1],2),"$, $",
round(ttest$conf.int[2],2),"]$, $t(",dof,") = ",q,"$, $",pv,"$",
sep ="")
small<- paste("$t(",dof,") = ",q,"$, $",pv,"$",
sep ="")
return(list(full=full, small=small))
}
tt_txt(y)
tt_txt(y, beta = T)
tt_txt(y, beta = F)
tt_txt(y)
#'a<-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
#' Poids des souris après traitement
#'b<-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
#' x<-t.test(a , mu=  0)
#' y<-t.test(a,b)
#' z<-t.test(a,b, paired = T)
#' tt_txt(x)
#' tt_txt(y)
#' tt_txt(z)
#' tt_txt(z, beta = T)
tt_txt <- function(model, beta = T){
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
ttest<-model
# one sample t test
q<-round(ttest$statistic,2)# statistic q
dof<-round(ttest$parameter,2)# global degree of freedom
pv<-p_txt(ttest$p.value)# raw p value. Beyond 10^-6, the round will give 0.
b <- round(ttest$estimate[1] - ifelse(is.na(ttest$estimate[2]),0,ttest$estimate[2]),2)
# estimation of the beta slope.
full<- paste(
ifelse(isTRUE(beta),
paste("$M = ",b, "$, ", sep = ""), ""),
"95\\% CI $[",round(ttest$conf.int[1],2),"$, $",
round(ttest$conf.int[2],2),"]$, $t(",dof,") = ",q,"$, $",pv,"$",
sep ="")
small<- paste("$t(",dof,") = ",q,"$, $",pv,"$",
sep ="")
return(list(full=full, small=small))
}
tt_txt(y)
tt_txt(y, beta = F)
a<-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
b<-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
#' @export cor_txt
#' @param
#' model = A cor.test object
#' @examples
#' Poids des souris avant traitement
#'a<-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
#' Poids des souris après traitement
#'b<-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
cor.test(a,b)
#' @export cor_txt
#' @param
#' model = A cor.test object
#' @examples
#' Poids des souris avant traitement
#'a<-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
#' Poids des souris après traitement
#'b<-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
v<-cor.test(a,b)
cor<-cor.test(a,b)
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
q<-round(cor$statistic,2)# statistic q
q
cor$statistic
v
dof<-round(cor$parameter,2)# global degree of freedom
dof
pv<-p_txt(cor$p.value)# raw p value. Beyond 10^-6, the round will give 0.
pv
v
cor$estimate
cl<-round(cor$conf.low[1],2)
cor$
c
cor$c
cl<-round(cor$conf.int
cu<-round(cor$conf.high[1],2)
pv_txt<-p_txt(tidycor$p.value[1])
pv6<-round(tidycor$p.value[1],6)
p<-tidycor$p.value[1]
rowch <-paste(iv1,"~",iv2, sep = "")
#cat(rowch)
inline<-paste(rowch, ", *r*=",q,", 95% CI [",cl,";",cu,"], ", pv_txt,
sep = "")
inline2<-paste("r = ",q,", 95% CI [",cl," ; ",cu,"]",
sep = "")  # for the plot annotations
return(c(inline, inline2, p))
}
cor$conf.int
correlat <- function(model){
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
cor<-cor.test(a,b)
b<-round(cor$estimate,2) # estimation of the beta slope.
# q<-round(cor$statistic,2)# statistic q
dof<-round(cor$parameter,2)# global degree of freedom
pv<-p_txt(cor$p.value)# raw p value. Beyond 10^-6, the round will give 0.
full<- paste("$r(",dof,") = ",c,
"95\\% CI $[",
round(ttest$conf.int[1],2),
"$, $",
round(ttest$conf.int[2],2),
"]$, $",
pv,"$",
sep ="")
small<- paste("$r(",dof,") = ",c,"$, $",pv,"$",
sep ="")
return(list(full=full, small=small))
}
cor.test(a,b)
#' @export cor_txt
#' @param
#' model = A cor.test object
#' @examples
#' Poids des souris avant traitement
#'a<-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
#' Poids des souris après traitement
#'b<-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
x<-cor.test(a,b)
cor_txt <- function(model){
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
cor<-cor.test(a,b)
b<-round(cor$estimate,2) # estimation of the beta slope.
# q<-round(cor$statistic,2)# statistic q
dof<-round(cor$parameter,2)# global degree of freedom
pv<-p_txt(cor$p.value)# raw p value. Beyond 10^-6, the round will give 0.
full<- paste("$r(",dof,") = ",c,
"95\\% CI $[",
round(ttest$conf.int[1],2),
"$, $",
round(ttest$conf.int[2],2),
"]$, $",
pv,"$",
sep ="")
small<- paste("$r(",dof,") = ",c,"$, $",pv,"$",
sep ="")
return(list(full=full, small=small))
}
cor_txt(x)
cor_txt <- function(model){
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
cor<-cor.test(a,b)
b<-round(cor$estimate,2) # estimation of the beta slope.
# q<-round(cor$statistic,2)# statistic q
dof<-round(cor$parameter,2)# global degree of freedom
pv<-p_txt(cor$p.value)# raw p value. Beyond 10^-6, the round will give 0.
full<- paste("$r(",dof,") = ",c,
"95\\% CI $[",
round(cor$conf.int[1],2),
"$, $",
round(cor$conf.int[2],2),
"]$, $",
pv,"$",
sep ="")
small<- paste("$r(",dof,") = ",c,"$, $",pv,"$",
sep ="")
return(list(full=full, small=small))
}
cor_txt(x)
cor
round(cor$conf.int[1],2)
round(cor$conf.int[2],2)
cor_txt <- function(model){
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
b<-round(cor$estimate,2) # estimation of the beta slope.
# q<-round(cor$statistic,2)# statistic q
dof<-round(cor$parameter,2)# global degree of freedom
pv<-p_txt(cor$p.value)# raw p value. Beyond 10^-6, the round will give 0.
full<- paste("$r(",dof,") = ",c,
"95\\% CI $[",
round(cor$conf.int[1],2),
"$, $",
round(cor$conf.int[2],2),
"]$, $",
pv,"$",
sep ="")
small<- paste("$r(",dof,") = ",c,"$, $",pv,"$",
sep ="")
return(list(full=full, small=small))
}
cor_txt(x)
round(cor$conf.int[1],2)
c
cor_txt <- function(model){
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
b<-round(cor$estimate,2) # estimation of the beta slope.
# q<-round(cor$statistic,2)# statistic q
dof<-round(cor$parameter,2)# global degree of freedom
pv<-p_txt(cor$p.value)# raw p value. Beyond 10^-6, the round will give 0.
full<- paste("$r(",dof,") = ",b,
"95\\% CI $[",
round(cor$conf.int[1],2),
"$, $",
round(cor$conf.int[2],2),
"]$, $",
pv,"$",
sep ="")
small<- paste("$r(",dof,") = ",b,"$, $",pv,"$",
sep ="")
return(list(full=full, small=small))
}
cor_txt(x)
cor_txt <- function(model){
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
b<-round(cor$estimate,2) # estimation of the beta slope.
# q<-round(cor$statistic,2)# statistic q
dof<-round(cor$parameter,2)# global degree of freedom
pv<-p_txt(cor$p.value)# raw p value. Beyond 10^-6, the round will give 0.
full<- paste("$r(",dof,") = ",b,
", 95\\% CI $[",
round(cor$conf.int[1],2),
"$, $",
round(cor$conf.int[2],2),
"]$, $",
pv,"$",
sep ="")
small<- paste("$r(",dof,") = ",b,"$, $",pv,"$",
sep ="")
return(list(full=full, small=small))
}
cor_txt(x)
