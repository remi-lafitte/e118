w<-eval(parse(text = a))
w
colnames(w)<-dv
y<-as.data.frame(d[,dv])
colnames(y)<-dv
shape(y) # histogramm and qqplot
shapiro.test(d[,dv])
measure<-d[,dv]
shapiro.test(measure)
levels(d[,iv])
levels(d$vs)
d$vs
iv
d$iv<-as.factor(d[,iv])
d$iv
levels(d[,iv])
levels(d$iv)
levels(d[,iv])
levels(d$iv)
iv
iv
for(i in levels(d$iv))
{}
i
d[iv == i , dv]
iv
i
dv
d[d$iv == i , dv]
shape(data = d[d$iv == i , dv])
shape(data = as.data.frame(d[d$iv == i , dv]))
sub_df<-as.data.frame(d[d$iv == i , dv])
sub_df<-as.data.frame(d[d$iv == i , dv])
colnames(sub_df)<-paste0(iv,"=",i)
shape(data = sub_df)
for(i in levels(d$iv)){
sub_df<-as.data.frame(d[d$iv == i , dv])
colnames(sub_df)<-paste0(iv,"=",i)
shape(data = sub_df)
}
source(here::here("R", "function.R"))
knitr::opts_chunk$set(echo = F, results = T, message = F, warning = F)
source(here::here("R", "function.R"))
formula <- paste0(dv, iv, sep = "~")
formula
formula <- paste(dv, iv, sep = "~")
formula
leveneTest(formula, d)
?leveneTest
leveneTest
stats::fligner.test(formula, d)
formula <- as.formula(paste(dv, iv, sep = "~"))
stats::fligner.test(formula, d)
tapply(d[,dv], d[,iv], var)
# Variances
round(tapply(d[,dv], d[,iv], var),2)
# Variances
round(tapply(d[,dv], d[,iv], var),2)
# Variance Ratio
max(round(tapply(d[,dv], d[,iv], var),2))
# Variance Ratio
round(max(tapply(d[,dv], d[,iv], var),2)/min(tapply(d[,dv], d[,iv], var),2))
# Variance Ratio
round(  (max(tapply(d[,dv], d[,iv], var),2)/min(tapply(d[,dv], d[,iv], var),2)))
max(tapply(d[,dv], d[,iv], var),2)
(min(tapply(d[,dv], d[,iv], var),2))
# Variances
round(tapply(d[,dv], d[,iv], var),2)
# Variance Ratio
round(max(tapply(d[,dv], d[,iv], var)) / min(tapply(d[,dv], d[,iv], var)),2)
# Means and SD
round(tapply(d[,dv], d[,iv], mean),2)
round(tapply(d[,dv], d[,iv], sd),2)
sub_df
print(shapiro.test(sub_df))
print(shapiro.test(as.vector(sub_df)))
print(shapiro.test(d[d$iv == i , dv])
}
print(shapiro.test(d[d$iv == i , dv])
shapiro.test(d[d$iv == i , dv])
d[d$iv == i , dv]
shapiro.test(d[d$iv == i , dv])
for(i in levels(d$iv)){
sub_df<-as.data.frame(d[d$iv == i , dv])
colnames(sub_df)<-paste0(iv,"=",i)
shape(data = sub_df)
shapiro.test(d[d$iv == i , dv])
}
par(mfrow=c(2,2))
for(i in levels(d$iv)){
sub_df<-as.data.frame(d[d$iv == i , dv])
colnames(sub_df)<-paste0(iv,"=",i)
shape(data = sub_df)
shapiro.test(d[d$iv == i , dv])
}
for(i in levels(d$iv)){
sub_df<-as.data.frame(d[d$iv == i , dv])
colnames(sub_df)<-paste0(iv,"=",i)
shape(data = sub_df)
print(shapiro.test(d[d$iv == i , dv]))
}
i
round(tapply(d[,dv], d[,iv], var),2)
round(max(tapply(d[,dv], d[,iv], var)) / min(tapply(d[,dv], d[,iv], var)),2)
source(file = here::here("ttest.Rmd"))
rmarkdown::render("analysis.R", "html_document")
rmarkdown::render("test.R", "html_document")
rmarkdown::render("test.R", "html_document")
rmarkdown::render("test.R", "html_document")
rmarkdown::render("ttest.Rmd")
rmarkdown::render("ttest.Rmd")
t.test(mpg ~  vs, data(mtcars))
t.test(mpg ~  vs,mtcars)
t.test(mpg ~  vs,mtcars)
ttest_report<-function(data = data(mtcars), model = t.test(mpg ~  vs,mtcars)){
rmarkdown::render("ttest.Rmd")
}
ttest_report()
ttest_report<-function(data = mtcars, model = t.test(mpg ~  vs,mtcars)){
rmarkdown::render("ttest.Rmd")
}
ttest_report()
ttest_report<-function(data = mtcars, model = t.test(mpg ~  vs,mtcars)){
rmarkdown::render("ttest.Rmd")
}
ttest_report()
ttest_report<-function(data = mtcars, model = t.test(mpg ~  vs,mtcars)){
rmarkdown::render("ttest.Rmd")
}
ttest_report()
filepath
getwd()
name = "crashtest"
output = "html"
paste0(output, "_document")
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
paste0("ttest.", output)
here::here(paste0("ttest.", output))
browseURL(here::here(paste0("ttest.", output)))
browseURL(here::here(paste0("ttest.", output))))
open = T
if(open = T){
browseURL(here::here(paste0("ttest.", output)))
}
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
open = F
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
}
ttest_report()
ttest_report(output = "docx")
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
}
ttest_report(output = "word")
knitr::opts_chunk$set(echo = F, results = T, message = F, warning = F)
source(here::here("R", "function.R"))
library(plyr)
data("mtcars")
d$iv<-as.factor(d[,iv])
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
}
ttest_report()
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
}
ttest_report()
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
}
ttest_report()
plot(seq(5:60), seq(23:89))
plot(x = d$mpg, y = d$vs)
d
d
plot(x = mtcars$mpg, y = mtcars$vs)
par(mfrow(1,2), mar = c(8,8,8,8))
par(mfrow = c(1,2), mar = c(8,8,8,8))
plot(x = mtcars$mpg, y = mtcars$vs)
plot(y = mtcars$mpg, x = mtcars$vs)
par(mfrow = c(1,2), mar = c(2,2,2,2))
plot(x = mtcars$mpg, y = mtcars$vs)
plot(y = mtcars$mpg, x = mtcars$vs)
par(mfrow = c(1,2), mar = c(4,4,2,2))
plot(x = mtcars$mpg, y = mtcars$vs)
plot(y = mtcars$mpg, x = mtcars$vs)
par(mfrow = c(1,2), mar = c(4,4,1,1))
plot(x = mtcars$mpg, y = mtcars$vs)
plot(y = mtcars$mpg, x = mtcars$vs)
par(mfrow = c(1,2), mar = c(2,4,1,1))
plot(x = mtcars$mpg, y = mtcars$vs)
plot(y = mtcars$mpg, x = mtcars$vs)
par(mfrow = c(1,2), mar = c(5,4,1,1))
plot(x = mtcars$mpg, y = mtcars$vs)
plot(y = mtcars$mpg, x = mtcars$vs)
par(mfrow = c(1,2), mar = c(5,4,1,5))
plot(x = mtcars$mpg, y = mtcars$vs)
plot(y = mtcars$mpg, x = mtcars$vs)
par(mfrow = c(1,2), mar = c(5,4,5,5))
plot(x = mtcars$mpg, y = mtcars$vs)
plot(y = mtcars$mpg, x = mtcars$vs)
dev.off()
2
par(mfrow = c(1,2), mar = c(2,2,5,2))
plot(x = mtcars$mpg, y = mtcars$vs)
plot(y = mtcars$mpg, x = mtcars$vs)
par(mfrow = c(1,2), mar = c(2,5,2,2))
plot(x = mtcars$mpg, y = mtcars$vs)
plot(y = mtcars$mpg, x = mtcars$vs)
par(mfrow = c(1,2), mar = c(5,2,2,2))
plot(x = mtcars$mpg, y = mtcars$vs)
plot(y = mtcars$mpg, x = mtcars$vs)
par(mfrow = c(1,2), mar = c(2,2,2,2))
plot(x = mtcars$mpg, y = mtcars$vs)
par(mfrow = c(1,2), mar = c(4,2,4,2))
plot(x = mtcars$mpg, y = mtcars$vs)
plot(y = mtcars$mpg, x = mtcars$vs)
par(mfrow = c(1,2), mar = c(5,2,5,2))
plot(x = mtcars$mpg, y = mtcars$vs)
plot(y = mtcars$mpg, x = mtcars$vs)
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
}
ttest_report()
ttest_report(output = "word")
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
}
ttest_report(output = "word")
ttest_report(output = "word")
d$iv<-as.factor(d[,iv])
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
}
ttest_report(output = "word")
ttest_report(output = "word")
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
}
ttest_report(output = "word")
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
}
ttest_report(output = "word")
ttest_report(output = "word")
ttest_report(output = "word", open =T)
library(officer)
read_docx("ttest.docx")
read_docx(here::here("ttest.docx"))
here::here("ttest.docx")
library(officer)
c<-read_docx(here::here("ttest.docx"))
content(c)
docx_summary(c)
system2("open","ttest.docx")
if(open == T & output == "word"){
system2("open","ttest.docx")
}
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
if(open == T & output == "word"){
system2("open","ttest.docx")
}
}
ttest_report(output = "word", open =T) # open = T don't work with word output
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F,
name = "test"){
rmarkdown::render(paste0(name,"_ttest.Rmd"), output_format = paste0(output, "_document"))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
if(open == T & output == "word"){
system2("open","ttest.docx")
}
}
ttest_report()
paste0(name,"_ttest.Rmd")
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F,
title = "test_ttest"){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
if(open == T & output == "word"){
system2("open","ttest.docx")
}
}
ttest_report(output = "word", open =T) # open = T don't work with word output
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F,
name = "remi"){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"), title = name)
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
if(open == T & output == "word"){
system2("open","ttest.docx")
}
}
ttest_report(output = "word", open =T) # open = T don't work with word output
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F,
name = "remi"){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"), output_file = I(name))
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
if(open == T & output == "word"){
system2("open","ttest.docx")
}
}
ttest_report(output = "word", open =T) # open = T don't work with word output
I(name)
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F,
name = "remi"){
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"),
output_file = name)
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
if(open == T & output == "word"){
system2("open","ttest.docx")
}
}
ttest_report(output = "word", open =T) # open = T don't work with word output
filename = ""
if(filename == ""){
filename<-"test"
}
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F,
filename = ""){
if(filename == ""){
filename<-"test"
}
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"),
output_file = filename)
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
if(open == T & output == "word"){
system2("open","ttest.docx")
}
}
ttest_report(output = "html", open =T) # open = T don't work with word output
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F,
filename = ""){
if(filename == ""){
filename<-"t-test"
}
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"),
output_file = filename)
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
if(open == T & output == "word"){
system2("open","ttest.docx")
}
}
ttest_report(output = "html", open =T) # open = T don't work with word output
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F,
filename = ""){
if(filename == ""){
filename<-"t-test"
}
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"),
output_file = filename)
if(open == T){
browseURL(here::here(paste0("ttest.", output)))
}
if(open == T & output == "word"){
system2("open","ttest.docx")
}
}
ttest_report(output = "html", open =T) # open = T don't work with word output
ttest_report(output = "html", open =T) # open = T don't work with word output
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F,
filename = ""){
if(filename == ""){
filename<-"t-test"
}
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"),
output_file = filename)
if(open == T){
browseURL(here::here(paste0("t-test.", output)))
}
if(open == T & output == "word"){
system2("open","ttest.docx")
}
}
ttest_report(output = "html", open =T) # open = T don't work with word output
ttest_report(output = "html", open =T) # open = T don't work with word output
ttest_report(output = "word", open =T) # open = T don't work with word output
ttest_report<-function(data = mtcars,
model = t.test(mpg ~  vs,mtcars),
output = "html",
open = F,
filename = ""){
if(filename == ""){
filename<-"t-test"
}
rmarkdown::render("ttest.Rmd", output_format = paste0(output, "_document"),
output_file = filename)
if(open == T){
browseURL(here::here(paste0("t-test.", output)))
}
if(open == T & output == "word"){
system2("open","t-test.docx")
}
}
ttest_report(output = "word", open =T) # open = T don't work with word output
ttest_report(output = "word", open =T) # open = T don't work with word output
