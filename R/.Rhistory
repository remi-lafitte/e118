", ",
CI_high,
"]",
sep = "")
)
txt<-txt[txt$Parameter == effect,]
return(txt)
}
anova_txt(model = model)
anova_txt(model = model, effect = "intra")
model
anova_txt(model = model, effect = "vs")
anova_txt<- function(model_aov_4, effect = "T"){
# library(afex)
# library(effectsize)
# library(dplyr)
# library(magrittr)
pes<-
effectsize::eta_squared(model, partial = TRUE, ci = 0.9) %>%
data.frame %>%
mutate_if(is.numeric, round, digits=3)
table<-
model$anova_table %>%
data.frame %>%
mutate(Parameter = rownames(.))%>%
mutate_if(is.numeric, round, digits=2) %>%
inner_join(., pes, by = "Parameter")
txt<- table %>%
mutate(
txt= paste("*F*(",
num.Df,
", ",
den.Df,
") = ",
F,
", *p* < ",
Pr..F.,
", ges = ",
ges,
", pes = ",
Eta_Sq_partial,
", 95% CI [",
CI_low,
", ",
CI_high,
"]",
sep = "")
)
txt<-txt[txt$Parameter == effect,]
return(txt)
}
anova_txt(model = model, effect = "vs")
anova_txt(model = model)
model
model$Effect
effectsize::eta_squared(model, partial = TRUE, ci = 0.9)
x<-effectsize::eta_squared(model, partial = TRUE, ci = 0.9)
x$Parameter
anova_txt<- function(model_aov_4, effect = F){
# library(afex)
# library(effectsize)
# library(dplyr)
# library(magrittr)
pes<-
effectsize::eta_squared(model, partial = TRUE, ci = 0.9) %>%
data.frame %>%
mutate_if(is.numeric, round, digits=3)
table<-
model$anova_table %>%
data.frame %>%
mutate(Parameter = rownames(.))%>%
mutate_if(is.numeric, round, digits=2) %>%
inner_join(., pes, by = "Parameter")
txt<- table %>%
mutate(
txt= paste("*F*(",
num.Df,
", ",
den.Df,
") = ",
F,
", *p* < ",
Pr..F.,
", ges = ",
ges,
", pes = ",
Eta_Sq_partial,
", 95% CI [",
CI_low,
", ",
CI_high,
"]",
sep = "")
)
filter<-if_else(effect == F, txt$Parameter, effect)
txt<-txt[txt$Parameter == c(filter),]
return(txt)
}
anova_txt(model = model, effect = "vs")
anova_txt<- function(model_aov_4, effect = F){
# library(afex)
# library(effectsize)
# library(dplyr)
# library(magrittr)
pes<-
effectsize::eta_squared(model, partial = TRUE, ci = 0.9) %>%
data.frame %>%
mutate_if(is.numeric, round, digits=3)
table<-
model$anova_table %>%
data.frame %>%
mutate(Parameter = rownames(.))%>%
mutate_if(is.numeric, round, digits=2) %>%
inner_join(., pes, by = "Parameter")
txt<- table %>%
mutate(
txt= paste("*F*(",
num.Df,
", ",
den.Df,
") = ",
F,
", *p* < ",
Pr..F.,
", ges = ",
ges,
", pes = ",
Eta_Sq_partial,
", 95% CI [",
CI_low,
", ",
CI_high,
"]",
sep = "")
)
filter<-if_else(effect == F, txt$Parameter, effect)
txt<-txt[txt$Parameter == filter,]
return(txt)
}
anova_txt(model = model, effect = "vs")
?if
)
if
x$Parameter
c(x$Parameter)
anova_txt<- function(model_aov_4, effect = txt$Parameter){
# library(afex)
# library(effectsize)
# library(dplyr)
# library(magrittr)
pes<-
effectsize::eta_squared(model, partial = TRUE, ci = 0.9) %>%
data.frame %>%
mutate_if(is.numeric, round, digits=3)
table<-
model$anova_table %>%
data.frame %>%
mutate(Parameter = rownames(.))%>%
mutate_if(is.numeric, round, digits=2) %>%
inner_join(., pes, by = "Parameter")
txt<- table %>%
mutate(
txt= paste("*F*(",
num.Df,
", ",
den.Df,
") = ",
F,
", *p* < ",
Pr..F.,
", ges = ",
ges,
", pes = ",
Eta_Sq_partial,
", 95% CI [",
CI_low,
", ",
CI_high,
"]",
sep = "")
)
txt<-txt[txt$Parameter == effect,]
return(txt)
}
anova_txt(model = model)
anova_txt(model = model, effect = "vs")
#' @export tt_mu_txt
#' @param dv
#' @param iv
#' @param df = data frame
#' @return A text
#' @examples
data(mtcars)
dv="mpg"
df = mtcars
fit<-as.formula(paste(dv, "~" ,mu))
ttest<-t.test(x = df[,dv],y=NULL, mu = mu, data = df)
mu = 0
fit<-as.formula(paste(dv, "~" ,mu))
ttest<-t.test(x = df[,dv],y=NULL, mu = mu, data = df)
q<-round(ttest$statistic,2)# statistic q
dof<-round(ttest$parameter,2)# global degree of freedom
pv<-round(ttest$p.value,6)# raw p value. Beyond 10^-6, the round will give 0.
b<-round(ttest$estimate,2)# estimation of the beta slope.
ttest
ttest$conf.int
ttest$conf.int[1]
round(ttest$conf.int[1],2)
cbind(round(ttest$conf.int[1],2),round(ttest$conf.int[2],2)))
cbind(round(ttest$conf.int[1],2),round(ttest$conf.int[2],2))
paste((round(ttest$conf.int[1],2),",", round(ttest$conf.int[2],2))
cd  <- (mean(df[,dv])-mu)/sd(df[,dv])
# cohen's dz
cd_ci<-effsize::cohen.d(df[, dv],f=NA, conf.level = 0.95,mu = mu,
hedges.correction = F)
# confidence interval thanks to the effsize package
inline<-paste("*t*(",dof,")=",q,", *p*<",pv,", *d*=",round(cd,2),", 95% CI[",round(cd_ci$conf.int[1],2),", ",
round(cd_ci$conf.int[2],2),"]", sep = "")
return(inline)
}
paste(round(ttest$conf.int[1],2),",", round(ttest$conf.int[2],2))
paste(round(ttest$conf.int[1],2),", ", round(ttest$conf.int[2],2), sep = "")
paste(round(ttest$conf.int[1],2),", ", round(ttest$conf.int[2],2), sep = "")
ci<-paste("[", round(ttest$conf.int[1],2),", ", round(ttest$conf.int[2],2),"]", sep = "")
ci
ci<-paste("95% CI [", round(ttest$conf.int[1],2),", ", round(ttest$conf.int[2],2),"]", sep = "")
fit<-as.formula(paste(dv, "~" ,mu))
ttest<-t.test(x = df[,dv],y=NULL, mu = mu, data = df)
q<-round(ttest$statistic,2)# statistic q
dof<-round(ttest$parameter,2)# global degree of freedom
pv<-round(ttest$p.value,6)# raw p value. Beyond 10^-6, the round will give 0.
b<-round(ttest$estimate,2)# estimation of the beta slope.
ci<-paste("95% CI [", round(ttest$conf.int[1],2),", ", round(ttest$conf.int[2],2),"]", sep = "")
cd  <- (mean(df[,dv])-mu)/sd(df[,dv])
inline<-paste("*t*(",dof,")=",q,
", ", ci,
", *p*<",pv,", *d*=",round(cd,2),
sep = "")
inline
ttest$p.value
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
inline<-pv
return(inline)
}
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
pv<-p_txt(ttest$p.value)# raw p value. Beyond 10^-6, the round will give 0.
pv
q<-round(ttest$statistic,2)# statistic q
dof<-round(ttest$parameter,2)# global degree of freedom
pv<-p_txt(ttest$p.value)# raw p value. Beyond 10^-6, the round will give 0.
b<-round(ttest$estimate,2)# estimation of the beta slope.
ci<-paste("95% CI [", round(ttest$conf.int[1],2),", ", round(ttest$conf.int[2],2),"]", sep = "")
cd  <- (mean(df[,dv])-mu)/sd(df[,dv])
inline<-paste("*t*(",dof,")=",q,
", ", ci,
", ",p,
", *d*=",round(cd,2),
sep = "")
inline<-paste("*t*(",dof,")=",q,
", ", ci,
", ",pv,
", *d*=",round(cd,2),
sep = "")
inline
tt_mu_txt <- function(dv , mu = 0, df){
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
# # by default mu = 0
# library(effsize)
fit<-as.formula(paste(dv, "~" ,mu))
# to enter fit object in t.test
ttest<-t.test(x = df[,dv],y=NULL, mu = mu, data = df)
# one sample t test
q<-round(ttest$statistic,2)# statistic q
dof<-round(ttest$parameter,2)# global degree of freedom
pv<-p_txt(ttest$p.value)# raw p value. Beyond 10^-6, the round will give 0.
b<-round(ttest$estimate,2)# estimation of the beta slope.
ci<-paste("95% CI [", round(ttest$conf.int[1],2),", ", round(ttest$conf.int[2],2),"]", sep = "")
cd  <- (mean(df[,dv])-mu)/sd(df[,dv])
# cohen's dz
#   cd_ci<-effsize::cohen.d(df[, dv],f=NA, conf.level = 0.95,mu = mu,
#                            hedges.correction = F)
#   # confidence interval thanks to the effsize package
txt<-paste("*t*(",dof,")=",q,
", ", ci,
", ",pv,
", *d*=",round(cd,2),
sep = "")
return(txt)
}
#' @export tt_mu_txt
#' @param dv
#' @param iv
#' @param df = data frame
#' @return A text
#' @examples
tt_mu_txt(dv = "mpg", df = mtcars)
library(dplyr)
#' @export tt_mu_txt
#' @param tt_mu_txt(t.test object)
#' @examples
#' tt_mu_txt(dv = "mpg", df = mtcars)
library(mtcars)
#' @export tt_mu_txt
#' @param tt_mu_txt(t.test object)
#' @examples
#' tt_mu_txt(dv = "mpg", df = mtcars)
data(mtcars)
t.test(mpg ~ 0, mtcars)
t.test(x=mpg , mu=  0, mtcars)
t.test(y=mpg , mu=  0, mtcars)
t.test(mtcars$mpg , mu=  0)
x<-t.test(mtcars$mpg , mu=  0)
tt_mu_txt <- function(model){
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
# # by default mu = 0
# library(effsize)
# fit<-as.formula(paste(dv, "~" ,mu))
# # to enter fit object in t.test
ttest<-model
# one sample t test
q<-round(ttest$statistic,2)# statistic q
dof<-round(ttest$parameter,2)# global degree of freedom
pv<-p_txt(ttest$p.value)# raw p value. Beyond 10^-6, the round will give 0.
b<-round(ttest$estimate,2)# estimation of the beta slope.
ci<-paste("95% CI [", round(ttest$conf.int[1],2),", ", round(ttest$conf.int[2],2),"]", sep = "")
cd  <- (mean(df[,dv])-mu)/sd(df[,dv])
# cohen's dz
#   cd_ci<-effsize::cohen.d(df[, dv],f=NA, conf.level = 0.95,mu = mu,
#                            hedges.correction = F)
#   # confidence interval thanks to the effsize package
txt<-paste("*t*(",dof,")=",q,
", ", ci,
", ",pv,
", *d*=",round(cd,2),
sep = "")
return(txt)
}
tt_mu_txt(x)
library(papaja)
apa_print(x)
full<-
paste(
"$M = ",20.09,"$", "95\\% CI $[",17.92;"$, $",22.26,"]$, $t(",31,") = ",18.86,"$, $",p < .001"$",
sep =""
)
full<-
paste(
"$M = ",
20.09,
"$, 95\\% CI $["
,17.92,
"$, $"
,22.26,
"]$, $t(",31,") = ",18.86,"$, $",p < .001"$",
sep =""
)
full<-
paste(
"$M = "
,20.09,
"$, 95\\% CI $["
,17.92,
"$, $"
,22.26,
"]$, $t("
,31,
") = "
,18.86,
"$, $"
,pv,
"$",
sep =""
)
full
full
"$M = 20.09$, 95\\% CI $[17.92$, $22.26]$, $t(31) = 18.86$, $p < 10^-6$"
ci
tt_mu_txt <- function(model){
p_txt<-function(p){
a = 'p < '
b = 'p = '
p <- ifelse(is.character(p), as.numeric(p), p)
p3 <- round(p, 3)
pv<-
ifelse(p < 0.000001,
"p < 10^-6",
ifelse(p < .00001,
"p < 10^-5",
ifelse(p < .0001,
"p < 10^-4",
ifelse(p < .001,
"p < 0.001",
ifelse(p < .05,
paste("*p* < ", p3, sep = ""),
paste("*p* = ", p3, sep = ""))))))
return(pv)
}
# # by default mu = 0
# library(effsize)
# fit<-as.formula(paste(dv, "~" ,mu))
# # to enter fit object in t.test
ttest<-model
# one sample t test
q<-round(ttest$statistic,2)# statistic q
dof<-round(ttest$parameter,2)# global degree of freedom
pv<-p_txt(ttest$p.value)# raw p value. Beyond 10^-6, the round will give 0.
b<-round(ttest$estimate,2)# estimation of the beta slope.
# ci<-paste("95% CI [", round(ttest$conf.int[1],2),", ", round(ttest$conf.int[2],2),"]", sep = "")
# cd  <- (mean(df[,dv])-mu)/sd(df[,dv])
# cohen's dz
#   cd_ci<-effsize::cohen.d(df[, dv],f=NA, conf.level = 0.95,mu = mu,
#                            hedges.correction = F)
#   # confidence interval thanks to the effsize package
# ", *d*=",round(cd,2),
full<-
paste(
"$M = "
,b,
"$, 95\\% CI $["
,round(ttest$conf.int[1],2),
"$, $"
,round(ttest$conf.int[2],2),
"]$, $t("
,dof,
") = "
,q,
"$, $"
,pv,
"$",
sep =""
)
return(list(txt = full))
}
tt_mu_txt(x)
y<-tt_mu_txt(x)
y$txt
"$M = 20.09$, 95\\% CI $[17.92$, $22.26]$, $t(31) = 18.86$, $p < 10^-6$"
x<-t.test(mtcars$qsec , mu=  0)
y<-tt_mu_txt(x)
y
library(roxygen2)
library(devtools)
